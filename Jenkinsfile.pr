pipeline {
    agent any

    environment {
        CURRENT_VERSION = currentVersion()
        NEXT_VERSION = nextVersion()
    }

    stages {

        stage('Hello') {
            steps {
                echo "current vesion = ${CURRENT_VERSION}"
                echo "next version = ${NEXT_VERSION}"
            }
        }

        stage('Validate Commit Message') {
            steps {
                script {
                    // Get the commit message
                    def commitMessage = sh(
                        script: 'git log -1 --pretty=%B',
                        returnStdout: true
                    ).trim()
                    
                    // Echo the commit message for visibility
                    echo "Current commit message: '${commitMessage}'"
                    
                    // Simple regex for conventional commits with case insensitivity and BREAKING CHANGE
                    // (?i) makes the pattern case insensitive
                    def pattern = '(?i)^(feat|fix|docs|chore|style|refactor|test|perf|build|ci|revert)(!|: breaking change|: BREAKING CHANGE)?:.+'
                    
                    if (!(commitMessage =~ pattern)) {
                        error """
                            Invalid commit message format!
                            Expected format: type: description
                            Valid types (case insensitive): FEAT, FIX, DOCS, CHORE, STYLE, REFACTOR, TEST, PERF, BUILD, CI, REVERT
                            Breaking changes can be indicated with: 
                            - An exclamation mark: feat!: description
                            - In the description: feat: BREAKING CHANGE: description
                            Examples: 
                            - feat: add login feature
                            - FIX: resolve bug
                            - FEAT!: redesign API
                            - chore: BREAKING CHANGE: update dependencies
                        """
                    }
                    
                    echo "Commit message validation passed!"
                }
            }
        }
    }
    post {
        always {
            githubNotify context: 'jenkins/pipeline2', status: currentBuild.result == 'SUCCESS' ? 'SUCCESS' : 'FAILURE', description: "Test result: ${currentBuild.result}"
        }
    }
}
